#!/bin/bash

set -e
TIMEOUT=2 # Default maximum time to run subprocess without showing its output
FLAGFILE="$(mktemp)" # If present, indicates the process hasn't exited yet.
OUTFILE="$(mktemp)" # Buffered output from the process
EXITCODE="$(mktemp)"

cleanup() {
    rm -f "$FLAGFILE" "$OUTFILE" "$EXITCODE"
}
trap cleanup SIGINT SIGTERM EXIT

if [ "$1" = "-t" ]; then
    TIMEOUT="$2"
    shift; shift;
fi

monitor_for_exit() {
    local FLAGFILE=$1; shift
    local OUTFILE=$1; shift
    echo 0 > "$EXITCODE"
    "$@" &> "$OUTFILE" || echo $? > "$EXITCODE"
    rm -f "$FLAGFILE"
}

monitor_for_exit "$FLAGFILE" "$OUTFILE" "$@" &

ENDTIME=$(($(date +%s) + TIMEOUT))
while [ -e "$FLAGFILE" ] && [ "$(date +%s)" -lt "$ENDTIME" ]; do
    sleep 0.25
done

if [ -e "$FLAGFILE" ]; then
    tail -n +1 -f "$OUTFILE" &
    while [ -e "$FLAGFILE" ]; do sleep 0.25; done
fi

RC=$(cat "$EXITCODE")
[ "$RC" -ne 0 ] && cat $OUTFILE

cleanup
exit "$RC"
